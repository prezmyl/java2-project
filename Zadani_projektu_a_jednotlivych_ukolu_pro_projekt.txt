Semestrální projekt:
Vytvořte webovou aplikaci (back end v Javě - Spring/Quarkus) s rozhraním REST, front end v libovolné webové technologii nebo JavaFX.

Využijte projekt z minulého semestru (hru) a zaměřte se na ukládání dat. Data ukládejte s využitím REST API (Možno využít Swagger/Open Api generátor). Je možno také využít projektu do jiných předmětu kde je cílem vytvořit webovou aplikaci a řešení sloužit s projektem do předmětu Java2.

Aplikace bude využívat databázi prostřednictvím JPA. Budou využity minimálně 3 entity s vazbami mezi sebou. Minimálně jedna vazba bude alespoň 1:N.



Zadani ukol01:
Maven - použití pluginů
Použijte projekt (hru) z minulého semestru a přidejte do Maven projektu pluginy tak aby se vytvořil balíček JAR a adresář libs. Je potřeba využít pluginů maven-dependency-plugin a maven-jar-plugin. Inspirujte se třeba v zadání ze cvičení (https://swi.cs.vsb.cz/jezek/student-information/java2/lab01.html).

Vytvořte skript run(.bat nebo .sh) pro spouštění hry.

Spuštění aplikace
Upravený příkaz pro spuštění hry:

Bez modulů (není případ FX aplikace): java -jar name_of_jar_file
S využitím modulů: java --module-path name_of_your_jar_file.jar:name_of_folder_fith_dependencies -m your_module_name/your_main_class_full_name
S využitím modulů příklad: java --module-path project-0.0.1-SNAPSHOT.jar:libs -m cz.vsb.project/cz.vsb.App
vložte do skriptu.

JLINK
Zkuste vytvořit jlink balík s využitím pluginu javafx-maven-plugin. Plugin maven-jlink-plugin ze cvičení nefunguje v kombinaci s knihovnami JavaFX.

<plugin>
    <groupId>org.openjfx</groupId>
    <artifactId>javafx-maven-plugin</artifactId>
    <version>0.0.8</version>
    <executions>
        <execution>
            <id>create-jlink-image</id>
            <phase>package</phase>
            <goals>
                <goal>jlink</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <mainClass>cz.vsb.fei.java2.jez04lab01/cz.vsb.fei.java2.jez04lab01.App --must be changed</mainClass>
    </configuration>
</plugin>
Přidejte závislosti
Přidejte závislosti pro Unit testy v Kelvinu

        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>3.0</version>
            <scope>test</scope>
        </dependency>
Moduly
Použijte projekt (hru) z minulého semestru a vytvořte samostatnou knihovnu (samostatný maven projekt). Můžete postupovat jako na cvičení nebo se můžete pokusit vytvořit rodičovský maven projekt se dvěmi podprojekty. Jak je uvedeno například v https://www.baeldung.com/maven-multi-module

Obsah knihovny
do knihovny oddělte třídy zodpovědné za ukládání dat. Pokud projekt obsahoval jen základní možnosti ukládání, pokuste se rozšířit ukládaná data, obalte je do samostatných třídy aby se s nimi jednoduše pracovalo.



Zadani ukol02:
Logging
Použijte projekt (hru) z minulého semestru a přidejte knihovnu Log4j2. Musíte upravit pom.xml a module-info.java. Nezapomeňte přidat konfigurační soubor log4j2.xml.

Nakonfigurujte logování do konzoly a do souboru.

V kódu přidejte logovací zprávy alespoň ve dvou různých úrovních. Typická použití jsou:

pro bloky catch se přidávají hlášky v úrovni error, warning nebo fatal a jako poslední parametr logovací metody se předává samotná exception aby byl v logu vidět stacktrace. Úroveň warning se používá pokud došlo k výjimce ale kód jí umí vyřešit nebo obejít.
Úroveň info nebo debug se používá pro záznam, že se provedla nějaká akce nebo kus kódu, který je důležitý.
Úroveň trace nebo debug pro detailní informace o průběhu programu a případných hodnotách proměnných. Ale pozor asi by se v logu neměli objevovat informace jako například přihlašovací jméno a heslo.
Lombok
Použijte projekt (hru) z minulého semestru a přidejte knihovnu Lombok. Musíte upravit pom.xml na 2 místech (dependency a maven-compiler-plugin) a module-info.java.

Použijte anotace z knihovny lombok, všude kde je to možné (kde váš kód odpovídá kódu generovanému lombokem):

vytvoření proměnné s loggrem
setry a getry
konstruktory
...
Builder, Equals and Hashcode, enum, switch, record
Pokud najdete vhodné místo ve vašem projektu zkuste využít anotaci Builder z lomboku nebo také anotaci Equals and Hashcode. Pozor co je vše součástí anotace Equals and Hashcode a To String aby nedošlo k zacyklení.

Pokud ještě nemáte použito a najdete vhodné místo použijte také enum a případně switch (s enumem) ideálně v jeho "lambda verzi". Obdobně na vhodném místě, pokud takové existuje, použijte record.



Zadani ukol03:
Java Persistent Api
Upravte projekt tak aby se nějaká data (alespoň dvě třídy) napříklkad skóre a nastavení nebo hráč ukládalo do databáze pomocí JPA. Ukládejte takové třídy aby alespoň mezi dvěma třídami byla vazba 1:N.

Závislosti
Pro využití JPA musíme přidat závislosti na knihovny jakarta.persistence-api verze 3.2.0 a hibernate-core verze 6.6.11.Final

Module info
Projekt bude potřebovat využít moduly jakarta.persistence a org.hibernate.orm.core.

Taky je nutno balík lab.data otevřít všem ne jen balíku javafx.base aby si jej Hibernate mohl pomocí reflexe zpracovat.

Konfigurace JPA
Do složky src/main/resources/META-INF přidejte soubor persistence.xml ten je hlavním konfiguračním souborem pro JPA.

Obsah souboru je uveden níže a můžete tam najít jméno perzistentní jednotky (to budete využívat ve zdrojových kódech), nastavení připojení na databázi a nastavení samotného Hibernetu, třeba to, že se má pokusit vytvořit databázové schéma podle entitních tříd.

<?xml version="1.0" encoding="UTF-8"?>
<persistence version="3.0"
    xmlns="https://jakarta.ee/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        https://jakarta.ee/xml/ns/persistence
        https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd">
    <persistence-unit name="java2"
        transaction-type="RESOURCE_LOCAL">

        <!-- If you are running in a production environment, add a managed data 
            source, this example data source is just for development and testing! -->
        <properties>
            <property name="jakarta.persistence.jdbc.url"
                value="jdbc:h2:file:./db/java2" />
            <!-- In memory DB no store to disk
                <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:mem:java2" />
            -->
            <property name="jakarta.persistence.jdbc.driver"
                value="org.h2.Driver" />


            <property name="jakarta.persistence.jdbc.user" value="app" />
            <property name="jakarta.persistence.jdbc.password"
                value="app" />
            <property
                name="jakarta.persistence.schema-generation.database.action"
                value="create"></property>

            <!-- Properties for Hibernate -->
            <property name="hibernate.show_sql" value="false" />
            <property name="hibernate.format_sql" value="true" />
            <!--
                <property name="hibernate.hbm2ddl.auto" value="update" />
            -->

        </properties>
    </persistence-unit>

</persistence>
JPA Hibernate Model Gen
Pomocí mavenu přidejt knihovnu hibernate-jpamodelgen, která umožní automatické vygenerování popisných třít pro JPA entity.

Závislost do pom.xml

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <scope>provided</scope>
            <version>6.6.11.Final</version>
        </dependency>
Nutno přidat k pluginu maven-compiler-plugin jako annotation processor hned za lombok.
                        <path>
                            <groupId>org.hibernate</groupId>
                            <artifactId>hibernate-jpamodelgen</artifactId>
                            <version>6.6.11.Final</version>
                        </path>
Dále rovněž do pluginu maven-compiler-plugin hned za konec </configuration> spouštění ve fázi generate-sources
                <executions>
                    <execution>
                        <id>process</id>
                        <phase>generate-sources</phase>
                    </execution>
                </executions>
Vygenerované zdorojové kódy ve složce target/generated-sources/annotations musíme přidat k projektovým souborům pomocí pluginu build-helper-maven-plugin:
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <sources>
                        <source>target/generated-sources/annotations</source>
                    </sources>
                </configuration>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
Do module.info.java nutno přidat závislost na modulu pro anotace ve vygenerovaných třídách:

requires static jakarta.annotation;
Entitní třídy
Entitní třídu upravte tak aby byla platnou entitní třídou:

Přidejte anotaci pro entitní třídy
Přidejte anotaci pro id a anotaci pro automatické generování id
Přidejte konstruktor bez parametrů
Entity a vazby
Vazby mezi entitami realizujete jako "referenci" instanční proměnnou mezi entitními třídami.

Nezapomeňte na anotace pro konstruktor bez parametrů
Anotace pro vazby OneToMany a ManyToOne a na parametr mappedBy
Zajistěte aby se kolekce nevypisovaly jako soužást metody toString
Zajestěte aby se pro hashcode a equals používalo pouze id.




ukol 4:
Spring server
Použijte https://start.spring.io (Spring initializer) a vytvořte nový maven projekt web server nebo použijte server z minulého domácího úkolu.

Pří vytváření zvolte:

Maven
verzi 3.4.4
Group, artifact, name, package name - zvolte nějaké smysluplné hodnoty (ne demo a example)
Packaging JAR
Java version 21
Do závislostí přidejte (pomocí tlačítka "ADD DEPENDENCIES...")

Lombok
Spring Web
Thymeleaf
Spring Data JPA
H2 Database
Projekt vygenerujte (stáhněte) a do pom.xml přidejte do závislostí:

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <scope>provided</scope>
            <version>6.6.11.Final</version>
        </dependency>
Do pom.xml přidejte do /project/build/plugins/plugin(maven-compiler-plugin)/configuration/annotationProcessorPaths/:

                        <path>
                            <groupId>org.hibernate</groupId>
                            <artifactId>hibernate-jpamodelgen</artifactId>
                            <version>6.6.11.Final</version>
                        </path>
Do pom.xml přidejte do /project/build/plugins/plugin(maven-compiler-plugin)/:

                <executions>
                    <execution>
                        <id>process</id>
                        <phase>generate-sources</phase>
                    </execution>
                </executions>
Do pom.xml přidejte do /project/build/plugins/:

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                    <configuration>
                        <sources>
                            <source>target/generated-sources/annotations</source>
                        </sources>
                    </configuration>
                    </execution>
                </executions>
            </plugin>
Implementujte
Vytvořte 2 entity takové, které mají mezi sebou vazbu 1:N
Vytvořte pro ně JPA repozitáře
Vytvořte REST controllery s metodami pro CRUD operace (dodržte pravidla REST api).
Použijte knihovnu pro vygenerování Swagger UI
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.8.6</version>
        </dependency>
http://localhost:8080/swagger-ui/index.html
Dejte pozor při serializaci a deserializaci entit do JSONu, u vazeb nejspíše dojde k zacyklení (StackOverflowException) problém můžete řešit několika způsoby:
DTO - Data Transfer Object: Serializace/deserializace zástupných objektů DTO (obyčejných java objektů - ne entit), které o obsahují jen to co se má serializovat/deserializovat
Rozbití: Použití anotace @JsonIgnore případně definice pomocné proměnné s ID pro serializaci do JSONu
@Column(insertable = false, updatable = false, name = "player_id")
private Long playerId;
Případně použití @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id") viz https://www.baeldung.com/jackson-advanced-annotations
Managed Reference: Použití anotací @JsonManagedReference a @JsonBackReference viz https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion
Třída na pomoc s generováním náhodných textů Tools.java




ukol 5:
Vlákna
Použijte vlákna (Thread) k ovládání, nepřátel, plošin nebo jiných autonomně pohyblivých grafických entit ve vaší hře.

Vlákno vytvoříte pro každou takovou entitu a v metodě run() nedefinujete její chovní (změnu směru, rychlosti, změnu animace, zánik nebo vytvoření další entity a podobně). To by mělo usnadnit popis chování entity, ale je nutno dát pozor na kritické sekce, kde se jednotlivá vlákna mohou ovlivnit, nezapomeňte použít synchronized právě v takovýchto místech.

Internacinalizace
Použijte java lokalizaci (ResourceBundle, Locale) pro překlad textů zobrazovaných ve vaší hře. Vytvořte "resource bundle" pro několik jazyků (alespoň dva).

Použijte např. parametry -Duser.language=cs -Duser.country=CZ nebo jiný způsob změny výchozího locales

Správné nastavení pro *.properties soubory a české nebo jiné speciální znaky je následující:
Postaru - Do java 8 povinné
Kódování ISO-8859-1 a UTF znaky se eskejpují ve formátu \uxxxx (př. \u017Dlu\u0165ou\u010Dk\u00FD k\u016F\u0148 sk\u00E1\u010De p\u0159es kalu\u017Ee) - IDEA nastavení: - Settings -> Editor -> File Encodings -> Default encoding for properties files: ISO-8859-1 - Settings -> Editor -> File Encodings -> Transparent native-to-ascii conversion: true - Eclipse - není třeba nastavovat

Novější varianta
Kódování UTF-8

IDEA nastavení:
Settings -> Editor -> File Encodings -> Default encoding for properties files: UTF-8
Settings -> Editor -> File Encodings -> Transparent native-to-ascii conversion: false
Eclipse s pluginem ResourceBundle editor:
< mouse RIGHT click > on file -> Properties -> Text file encoding: UTF-8
Window -> Preferences -> ResourceBundle editor -> Convert \uxxxx .... : false
